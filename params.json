{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Chromath","tagline":"JavaScript color conversion and manipulation functions","body":"# chromath\r\n\r\n## Overview\r\n\r\n  chromath provides provides many color conversion and manipulation functions. \r\n  \r\n  You can:\r\n\r\n * Create a color from just about any reasonable string\r\n * Convert from one color space to another (rgb->hex, hsv->hsl, rgb->hex->hsl->rgb)\r\n * Add two colors (using additive or subtractive color)\r\n * Get a color scheme (complement, split complement, triad, tetrad, etc) based on a color\r\n * Lots more. [Take a look at the docs](http://JFSIII.org/project/chromath/docs/)\r\n\r\n## Getting started\r\n  In the browser:\r\n\r\n    <script src=\"/path/to/chromath.js\"></script>\r\n\r\n  In NodeJS:\r\n\r\n    npm install chromath\r\n\r\n  then\r\n\r\n    var Chromath = require('chromath')\r\n\r\n  From there, the usage is identical in both environments.\r\n\r\n## Functional or Object-oriented\r\n  You can use chromath in a functional or object-oriented manner.\r\n\r\n    var red = new Chromath('rgb(255, 0, 0)');\r\n    red.towards('yellow', 0.5).toString(); // #FF7F00\r\n\r\n  is the same as\r\n\r\n    Chromath.towards('red', 'yellow', 0.5).toString(); // #FF7F00\r\n\r\n  The only difference between instance methods and Class methods with\r\n  the same name (e.g, `Chromath.tint` and `tint`) is that the instance\r\n  methods pass the instance value as the first argument.\r\n\r\n  Here's the definition of `Chromath.prototype.tint`:\r\n\r\n    tint: function (by) {\r\n        return Chromath.tint(this, by);\r\n    }\r\n\r\n  In NodeJS you can only pull in the portions you're interesed in,\r\n  e.g:\r\n\r\n    > var fromRGBToHex = require('chromath').rgb2hex\r\n    > fromRGBToHex(234, 56, 78)\r\n    '#EA384E'\r\n\r\n## Documentation\r\n  <http://JFSIII.org/project/chromath/docs/>\r\n\r\n## License\r\n[MIT](http://jfsiii.mit-license.org)"}